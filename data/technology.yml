title: Technology

# Skills to add:
# - Rails

description: |
  I've worked with a wide range of technologies, from front-end and back-end web stacks, to desktop and mobile apps, graphics, and audio.

  Here are a few of my recent projects. Visit my on [GitHub](https://github.com/danhalliday) profile to see some code, or [email me](mailto:dan@halliday.work) to get in touch about a project.

projects:

  - id: wireless-audio-visualiser
    title: Wireless Audio Visualiser
    subtitle: DST Innovations
    description: |
      I built an iOS app for [DST Innovations](http://www.dst-innovations.net) to serve as a controller for their prototype multimedia fashion product.

      The product features a wireless peripheral driving a visualiser display, which reacts to live music. The iOS app is a music player which analyses the audio in real time and computes a frequency spectrum, which is sent wirelessly to the peripheral.

      The main requirement was that the music and visuals played in lockstep, so I devised a clock synchronisation mechanism. The iOS app uses a very basic approximation to [Network Time Protocol](https://en.wikipedia.org/wiki/Network_Time_Protocol) to establish a common clock with the peripheral — in the order of a few milliseconds’ accuracy. It then delays audio playout by a fixed period for safety, and sends each audio frame with a timestamp against the common clock so the peripheral knows exactly when each frame should be displayed.

      I worked with iOS’s [Audio Units](https://en.wikipedia.org/wiki/Audio_Units) API to play and capture the audio data, and used a lock free circular buffer to pull samples out, running an FFT analysis on them on a separate thread and queueing them for transmission. Limitations on the data rate for Bluetooth LE meant packing the data fairly tightly, so I designed and documented a binary wire protocol, with a concise layout for _sync_ and _data_ packets.

      To test the system end-to-end, I created a simple Node.js tool running on a desktop computer which prints Bluetooth session lifecycle events and statistics on the incoming packets, and could be left running for long periods. This was especially helpful with the clock synchronisation mechanism, which would have been wildly unstable without some timeout values and other insights pulled from extended real-world use.
    skills:
      - iOS
      - C
      - Swift
      - Audio Units
      - DSP
      - Accelerate
      - Bluetooth
      - Node.js

  - id: mobile-text-to-speech-library
    title: Mobile Text-to-Speech Library
    subtitle: SpeechKit
    description: |
      I wrote an iOS [SDK](https://en.wikipedia.org/wiki/Software_development_kit) for [SpeechKit](https://speechkit.io) to give their customers an easy way to add podcast content to their apps. The kit is distributed on [CocoaPods](https://cocoapods.org), and can be added to an app in minutes.

      The implementation was relatively straightforward, being a thin front end to a backend service which uses IBM’s [Watson](https://www.ibm.com/watson/) to perform text-to-speech synthesis and intelligently cache articles as apps request them.

      The emphasis was really on ease of use and reliability for the developer, so I used iOS’s network and audio frameworks to avoid depending on lots of third party libraries, wrote extensive tests including testing the actual audio playback, and spent time writing readmes, API documentation, and code samples for both Objective-C and Swift.

      To demonstrate the kit and help with real-world testing, I put together a [React Native](https://www.reactnative.com) app which lists recent news stories from a range of publications, and features a mini player which reads the stories as a playlist. The app was released on the App Store and its _native bridge_ code added to the documentation to make integration with React apps easier.
    skills:
      - iOS
      - Swift
      - CocoaPods
      - API
      - Documentation
      - React Native

  - id: multichannel-streaming-server
    title: Multichannel Streaming Server
    subtitle: RIMMS TV
    description: |
      I created macOS and iOS apps for [RIMMS TV](https://www.rimms.tv) to enable their users to hear custom live audio mixes on set.

      The macOS server app acts as a live mixer, taking in up to 100 channels from an external sound card in the gallery and providing an unlimited number of separate output mixes fed back to the sound card and recorded using dedicated hardware.

      Producers and staff on set carry iPads running the iOS app, which connect to the server and each receive their own live audio mix. Each user can control levels using the iOS app, which talks to the server using a simple [Rest API](https://en.wikipedia.org/wiki/Representational_state_transfer).

      I used macOS’s [Audio Units](https://en.wikipedia.org/wiki/Audio_Units) API to implement the matrix mixer, so the server is compatible with a range of audio hardware and can work at any sample rate or buffer size. The audio needed to be streamed from the server to the clients with very low latency (in the tens of milliseconds), so I used a lock free circular buffer to lift samples from the Audio Unit graph and queue them in a separate thread for [Opus](https://en.wikipedia.org/wiki/Opus_(audio_format)) encoding and transmission over TCP.

      There were many challenges in making the iOS client app reliable under varying network and battery conditions. I put together a simple wire protocol for the clients to report _heartbeat_ health status messages so the server could adjust its outgoing streams, and did extensive testing using both TCP and UDP approaches to the socket connections.
    skills:
      - iOS
      - macOS
      - C
      - Audio Units
      - Opus
      - C++
      - Objective-C
      - Swift

  - id: podcast-analytics-platform
    title: Podcast Analytics Platform
    subtitle: Dash Audio
    draft: true
    description: |
      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    skills:
      - Node.js
      - JavaScript
      - CSS
      - AWS
      - Angular
      - Web Components
      - MongoDB
      - DevOps
      - React
      - MySQL
      - PostgreSQL
      - Cross-Browser

  - id: audio-processing library
    title: Audio Processing Library
    subtitle: EarSoft Audio
    draft: true
    description: |
      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    skills:
      - macOS
      - iOS
      - Android
      - Linux
      - C
      - C++
      - Objective-C
      - Swift
      - Java
      - NDK
      - OpenGL
      - GLSL
      - IOKit
      - Canvas
