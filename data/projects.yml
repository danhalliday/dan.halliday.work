- id: wireless-audio-visualiser
  title: Wireless Audio Visualiser
  subtitle: DST Innovations
  category: technology
  featured: true
  summary: |
    I built an iOS app for [DST Innovations](http://www.dst-innovations.net) to serve as a controller for their prototype multimedia fashion product. The product features a wireless peripheral driving a visualiser display, which reacts to live music. The iOS app is a music player which analyses the audio in real time and computes a frequency spectrum, which is sent wirelessly to the peripheral.
  description: |
    I built an iOS app for [DST Innovations](http://www.dst-innovations.net) to serve as a controller for their prototype multimedia fashion product.

    The product features a wireless peripheral driving a visualiser display, which reacts to live music. The iOS app is a music player which analyses the audio in real time and computes a frequency spectrum, which is sent wirelessly to the peripheral.

    The main requirement was that the music and visuals played in lockstep, so I devised a clock synchronisation mechanism. The iOS app uses a very basic approximation to [Network Time Protocol](https://en.wikipedia.org/wiki/Network_Time_Protocol) to establish a common clock with the peripheral — in the order of a few milliseconds’ accuracy. It then delays audio playout by a fixed period for safety, and sends each audio frame with a timestamp against the common clock so the peripheral knows exactly when each frame should be displayed.

    I worked with iOS’s [Audio Units](https://en.wikipedia.org/wiki/Audio_Units) API to play and capture the audio data, and used a lock free circular buffer to pull samples out, running an FFT analysis on them on a separate thread and queueing them for transmission. Limitations on the data rate for Bluetooth LE meant packing the data fairly tightly, so I designed and documented a binary wire protocol, with a concise layout for _sync_ and _data_ packets.

    To test the system end-to-end, I created a simple Node.js tool running on a desktop computer which prints Bluetooth session lifecycle events and statistics on the incoming packets, and could be left running for long periods. This was especially helpful with the clock synchronisation mechanism, which would have been wildly unstable without some timeout values and other insights pulled from extended real-world use.
  skills:
    - iOS
    - C
    - Swift
    - Audio Units
    - DSP
    - Accelerate
    - Bluetooth
    - Node.js

- id: soundry-co
  title: Soundry Co
  subtitle: Complete Brand Identity
  category: design
  featured: true
  summary: |
    To set Soundry apart from competitors and to reflect its focus on whole-product design and user experience, I created a bright and bold visual identity underpinned by Suitcase Type Foundry’s [Nudista](https://www.suitcasetype.com/nudista/specimen) — the perfect match for a modern engineering outfit.
  description: |
    [Soundry Co](http://soundry.co). make bespoke audio software. To set the company apart from competitors and to reflect its focus on whole-product design and user experience, I created a bright and bold visual identity underpinned by Suitcase Type Foundry’s [Nudista](https://www.suitcasetype.com/nudista/specimen) — the perfect match for a modern engineering outfit.

    An array of brand artwork pieces gives context to the simple mono combination mark, and luxury die-cut letterpress business cards show that quality is the company’s primary focus.
  skills:
    - Logo
    - Brand Art
    - Stationery
    - Typography
    - Web
  images:
    - title: Soundry Colour Combination Mark
      source: soundry-logo.jpg
      size: large
    - title: Soundry Business Cards
      source: soundry-business-cards-stacked.jpg
      size: small
    - title: Soundry Business Cards Box
      source: soundry-business-cards-box.jpg
      size: small
    - title: Scattered Soundry Business Cards
      source: soundry-business-cards-scattered.jpg
      size: large
    - title: Soundry Brand Artwork 1
      source: soundry-art-1.jpg
      size: small
    - title: Soundry Brand Artwork 2
      source: soundry-art-2.jpg
      size: small

- id: multichannel-streaming-server
  title: Multichannel Streaming Server
  subtitle: RIMMS TV
  category: technology
  featured: true
  summary: |
    I created macOS and iOS apps for [RIMMS TV](https://www.rimms.tv) to enable their users to hear custom live audio mixes on set. The macOS server app acts as a live mixer, taking in up to 100 channels from an external sound card in the gallery and providing an unlimited number of separate output mixes fed back to the sound card and recorded using dedicated hardware.
  description: |
    I created macOS and iOS apps for [RIMMS TV](https://www.rimms.tv) to enable their users to hear custom live audio mixes on set.

    The macOS server app acts as a live mixer, taking in up to 100 channels from an external sound card in the gallery and providing an unlimited number of separate output mixes fed back to the sound card and recorded using dedicated hardware.

    Producers and staff on set carry iPads running the iOS app, which connect to the server and each receive their own live audio mix. Each user can control levels using the iOS app, which talks to the server using a simple [Rest API](https://en.wikipedia.org/wiki/Representational_state_transfer).

    I used macOS’s [Audio Units](https://en.wikipedia.org/wiki/Audio_Units) API to implement the matrix mixer, so the server is compatible with a range of audio hardware and can work at any sample rate or buffer size. The audio needed to be streamed from the server to the clients with very low latency (in the tens of milliseconds), so I used a lock free circular buffer to lift samples from the Audio Unit graph and queue them in a separate thread for [Opus](https://en.wikipedia.org/wiki/Opus_(audio_format)) encoding and transmission over TCP.

    There were many challenges in making the iOS client app reliable under varying network and battery conditions. I put together a simple wire protocol for the clients to report _heartbeat_ health status messages so the server could adjust its outgoing streams, and did extensive testing using both TCP and UDP approaches to the socket connections.
  skills:
    - iOS
    - macOS
    - C
    - Audio Units
    - Opus
    - C++
    - Objective-C
    - Swift

- id: podcast-analytics-platform
  title: Podcast Analytics Platform
  subtitle: Dash Audio
  category: technology
  draft: true
  description:
  skills:
    - Node.js
    - JavaScript
    - CSS
    - AWS
    - Angular
    - Web Components
    - MongoDB
    - DevOps
    - React
    - MySQL
    - PostgreSQL
    - Cross-Browser

- id: audio-processing library
  title: Audio Processing Library
  subtitle: EarSoft Audio
  draft: true
  category: technology
  description:
  skills:
    - macOS
    - iOS
    - Android
    - Linux
    - C
    - C++
    - Objective-C
    - Swift
    - Java
    - NDK
    - OpenGL
    - GLSL
    - IOKit
    - Canvas

- id: earsoft-audio-app
  title: Earsoft Audio
  subtitle: Mobile App Design
  category: design
  featured: true
  summary: |
    I designed and built a unique audio player app for Earsoft that tailors sound to the listener’s environment and mood. The visuals are based around clean typography and strong iconography, and the two-tone colour scheme is algorithmically generated based on a hue chosen by the user.
  description: |
    I designed and built a unique audio player app for Earsoft that tailors sound to the listener’s environment and mood. The visuals are based around clean typography and strong iconography, and the two-tone colour scheme is algorithmically generated based on a hue chosen by the user.

    The implementation had to be very low level to ensure good battery life while listening, so I wrote a C library to do the audio processing, and connected it using iOS’s AudioUnit API and Android’s NDK for playback.
  skills:
    - Mobile
    - Responsive
    - Interactive
    - User Experience
    - Icons
    - Prototyping
  images:
    - title: Earsoft App Design Detail 1
      source: earsoft-app-9.jpg
      size: large
    - title: Earsoft App Design Detail 2
      source: earsoft-app-1a.jpg
      size: small
    - title: Earsoft App Design Detail 3
      source: earsoft-app-1b.jpg
      size: small
    - title: Earsoft App Design Detail 4
      source: earsoft-app-11.jpg
      size: large
    - title: Earsoft App Design Detail 5
      source: earsoft-app-2.jpg
      size: small
    - title: Earsoft App Design Detail 6
      source: earsoft-app-3.jpg
      size: small

- id: cantare-ladies-choir
  title: Cantare Ladies’ Choir
  subtitle: Logo & Colour Guide
  category: design
  description: |
    Cantare needed a strong, bold logo to use on everything from posters and concert programmes to bags and embroidered coats. They already had a strong black and pink colour scheme, so I worked with the group on a combination mark that would tie their brand together.

    After several prototypes and lots of feedback, we settled on a treble clef mark shaped to depict a young woman. [FF Schmalhans](https://www.fontfont.com/fonts/schmalhans) was a natural fit for the lettering &mdash; the tall, angled characters are intended to mimic the proud, singing women.
  skills:
    - Logo
    - Style Guide
  images:
    - title: Cantare Ladies’ Choir Combination Mark
      source: cantare-logo.jpg
      size: large
    - title: Cantare Ladies’ Choir Proof Detail 1
      source: cantare-client-detail.jpg
      size: small
    - title: Cantare Ladies’ Choir Proof Detail 2
      source: cantare-date-detail.jpg
      size: small
    - title: Cantare Ladies’ Choir Colour Sheet
      source: cantare-colour-sheet.jpg
      size: large
    - title: Cantare Ladies’ Choir Jacket 1
      source: cantare-coat-1.jpg
      size: small
    - title: Cantare Ladies’ Choir Jacket 2
      source: cantare-coat-2.jpg
      size: small

- id: a-happy-couple
  title: A Happy Couple
  subtitle: Wedding Stationery Pack
  category: design
  description: |
    The couple wanted a modern, elegant stationery pack, with a few extras such as a map for the day and a list of local attractions for guests to browse.

    I decided on mostly black and white detail with some dark red to highlight key items. To fulfil the stylistic brief I chose [Futura](http://en.wikipedia.org/wiki/Futura_(typeface)) for labels and [Minion](http://en.wikipedia.org/wiki/Minion_(typeface)) for prose, matching each face’s character by drawing diagrams with bold lines and dividing text with thin ones.
  skills:
    - Print
    - Typography
  images:
    - title: Wedding Invitation
      source: wedding-invitation.jpg
      size: large
    - title: Wedding Envelope
      source: wedding-envelope.jpg
      size: large

- id: mobile-text-to-speech-library
  title: Mobile Text-to-Speech Library
  subtitle: SpeechKit
  category: technology
  featured: true
  summary: |
    I wrote an iOS [SDK](https://en.wikipedia.org/wiki/Software_development_kit) for [SpeechKit](https://speechkit.io) to give their customers an easy way to add podcast content to their apps. The kit is distributed on [CocoaPods](https://cocoapods.org), and can be added to an app in minutes. The implementation was relatively straightforward, being a thin front end to a backend service which uses IBM’s [Watson](https://www.ibm.com/watson/) to perform text-to-speech synthesis and intelligently cache articles as apps request them.
  description: |
    I wrote an iOS [SDK](https://en.wikipedia.org/wiki/Software_development_kit) for [SpeechKit](https://speechkit.io) to give their customers an easy way to add podcast content to their apps. The kit is distributed on [CocoaPods](https://cocoapods.org), and can be added to an app in minutes.

    The implementation was relatively straightforward, being a thin front end to a backend service which uses IBM’s [Watson](https://www.ibm.com/watson/) to perform text-to-speech synthesis and intelligently cache articles as apps request them.

    The emphasis was really on ease of use and reliability for the developer, so I used iOS’s network and audio frameworks to avoid depending on lots of third party libraries, wrote extensive tests including testing the actual audio playback, and spent time writing readmes, API documentation, and code samples for both Objective-C and Swift.

    To demonstrate the kit and help with real-world testing, I put together a [React Native](https://www.reactnative.com) app which lists recent news stories from a range of publications, and features a mini player which reads the stories as a playlist. The app was released on the App Store and its _native bridge_ code added to the documentation to make integration with React apps easier.
  skills:
    - iOS
    - Swift
    - CocoaPods
    - API
    - Documentation
    - React Native
